# CI Dockerfile
# CI requires a special Dockerfile for use with OpenShift Builds which is what is used to build the image. This requires
# building the operator from the PR source without using the operator-sdk.
# NOTE: RUN mkdir <dir> is being used in cases where a directory needs to be created as CI image builds does not seem to
# be creating the directory as a result of the WORKDIR directive. 
# build stage for building binaries

FROM registry.svc.ci.openshift.org/ocp/builder:rhel-8-golang-1.15-openshift-4.6 as build
LABEL stage=build
RUN mkdir /build/

# Build WMCO
# The source here corresponds to the code in the PR and is placed here by the CI infrastructure.
RUN mkdir /build/windows-machine-config-operator
WORKDIR /build/windows-machine-config-operator
# Copy .git metadata so that we can generate the version for the WMCO binary
COPY .git .git
# Copy files and directories needed to build the WMCO binary
COPY build build
COPY cmd cmd
COPY deploy deploy
COPY hack hack
COPY pkg pkg
COPY test test
COPY vendor vendor
COPY version version
COPY go.mod go.mod
COPY go.sum go.sum
COPY Makefile Makefile
COPY tools.go tools.go
RUN make build

# Build WMCB
WORKDIR /build/windows-machine-config-operator/windows-machine-config-bootstrapper/
COPY windows-machine-config-bootstrapper/ .
RUN make build

# Build hybrid-overlay
WORKDIR /build/windows-machine-config-operator/ovn-kubernetes/
COPY ovn-kubernetes/ .
WORKDIR /build/windows-machine-config-operator/ovn-kubernetes/go-controller/
RUN make windows

# Build promu utility tool, needed to build the windows_exporter.exe metrics binary
WORKDIR /build/windows-machine-config-operator/promu/
COPY promu/ .
RUN go install .

# Build windows_exporter
WORKDIR /build/windows-machine-config-operator/windows_exporter/
COPY windows_exporter/ .
RUN GOOS=windows promu build -v

# Build Kubernetes node binaries
WORKDIR /build/windows-machine-config-operator/kubernetes/
COPY kubernetes/ .
ENV KUBE_BUILD_PLATFORMS windows/amd64
RUN make WHAT=cmd/kubelet
RUN make WHAT=cmd/kube-proxy

# Build CNI plugins
WORKDIR /build/windows-machine-config-operator/containernetworking-plugins/
COPY containernetworking-plugins/ .
ENV CGO_ENABLED=0
RUN ./build_windows.sh

# Build the operator image with following payload structure
# /payload/
#├── cni
#│   ├── flannel.exe
#│   ├── host-local.exe
#│   ├── win-bridge.exe
#│   ├── win-overlay.exe
#│   └── cni-conf-template.json
#├── hybrid-overlay-node.exe
#├── kube-node
#│   ├── kubelet.exe
#│   └── kube-proxy.exe
#├── powershell
#│   └── wget-ignore-cert.ps1
#│   └── hns.psm1
#├── windows_exporter.exe
#└── wmcb.exe

FROM registry.svc.ci.openshift.org/ocp/builder:rhel-8-golang-1.15-openshift-4.6
LABEL stage=operator

# Copy wmcb.exe
RUN mkdir /payload/
WORKDIR /payload/
COPY --from=build /build/windows-machine-config-operator/windows-machine-config-bootstrapper/wmcb.exe .

# Copy hybrid-overlay-node.exe
COPY --from=build /build/windows-machine-config-operator/ovn-kubernetes/go-controller/_output/go/bin/windows/hybrid-overlay-node.exe .

# Copy windows_exporter.exe
COPY --from=build /build/windows-machine-config-operator/windows_exporter/windows_exporter.exe .

# Copy kubelet.exe and kube-proxy.exe
RUN mkdir /payload/kube-node/
WORKDIR /payload/kube-node/
COPY --from=build /build/windows-machine-config-operator/kubernetes/_output/local/bin/windows/amd64/kubelet.exe .
COPY --from=build /build/windows-machine-config-operator/kubernetes/_output/local/bin/windows/amd64/kube-proxy.exe .

# Copy CNI plugin binaries and CNI config template cni-conf-template.json
RUN mkdir /payload/cni/
WORKDIR /payload/cni/
COPY --from=build /build/windows-machine-config-operator/containernetworking-plugins/bin/flannel.exe .
COPY --from=build /build/windows-machine-config-operator/containernetworking-plugins/bin/host-local.exe .
COPY --from=build /build/windows-machine-config-operator/containernetworking-plugins/bin/win-bridge.exe .
COPY --from=build /build/windows-machine-config-operator/containernetworking-plugins/bin/win-overlay.exe .
COPY --from=build /build/windows-machine-config-operator/pkg/internal/cni-conf-template.json .

# Copy required powershell scripts
RUN mkdir /payload/powershell/
WORKDIR /payload/powershell/
COPY --from=build /build/windows-machine-config-operator/pkg/internal/wget-ignore-cert.ps1 .
COPY --from=build /build/windows-machine-config-operator/pkg/internal/hns.psm1 .

WORKDIR /

ENV OPERATOR=/usr/local/bin/windows-machine-config-operator \
    USER_UID=1001 \
    USER_NAME=windows-machine-config-operator

# Changes needed for our CI

# Download and install oc
RUN curl -L -s https://mirror.openshift.com/pub/openshift-v4/clients/ocp/4.4.6/openshift-client-linux-4.4.6.tar.gz -o openshift-origin-client-tools.tar.gz \
    && echo "97ac91f9dede0d93bad8525934ef5a4f1c02e0b42d4f6ef58de99713e0f60d9c openshift-origin-client-tools.tar.gz" | sha256sum -c \
    && tar -xzf openshift-origin-client-tools.tar.gz \
    && mv oc /usr/bin/oc \
    && mv kubectl /usr/bin/kubectl \
    && rm -rf ./openshift* \
    && oc version

# Copy the source code to be used by our ci infra
RUN mkdir -p /go/src/github.com/openshift/windows-machine-config-operator/
WORKDIR /go/src/github.com/openshift/windows-machine-config-operator/
COPY --from=build /build/windows-machine-config-operator .

# install operator binary
COPY --from=build /build/windows-machine-config-operator/build/_output/bin/windows-machine-config-operator ${OPERATOR}
COPY --from=build /build/windows-machine-config-operator/build/bin /usr/local/bin
RUN  /usr/local/bin/user_setup

# Allow uid/gid in OpenShift
RUN chmod g=u /etc/passwd /etc/group
RUN chmod g=u /etc

# Create the directories needed for CI to work
RUN mkdir -m 777 -p /etc/cloud/
RUN mkdir -m 777 -p /etc/private-key/

# Open up permissions within WMCO directory
RUN chmod -R g=u+w /go/src/github.com/openshift/windows-machine-config-operator/

ENTRYPOINT [ "/bin/bash" ]
USER ${USER_UID}
